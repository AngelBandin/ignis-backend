/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.ignis.rpc.executor;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class IExecutorKeys implements org.apache.thrift.TBase<IExecutorKeys, IExecutorKeys._Fields>, java.io.Serializable, Cloneable, Comparable<IExecutorKeys> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IExecutorKeys");

  private static final org.apache.thrift.protocol.TField MSG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("msg_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("addr", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("keys", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new IExecutorKeysStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new IExecutorKeysTupleSchemeFactory();

  private long msg_id; // required
  private java.lang.String addr; // required
  private java.util.List<java.lang.Long> keys; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MSG_ID((short)1, "msg_id"),
    ADDR((short)2, "addr"),
    KEYS((short)3, "keys");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MSG_ID
          return MSG_ID;
        case 2: // ADDR
          return ADDR;
        case 3: // KEYS
          return KEYS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MSG_ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MSG_ID, new org.apache.thrift.meta_data.FieldMetaData("msg_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ADDR, new org.apache.thrift.meta_data.FieldMetaData("addr", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEYS, new org.apache.thrift.meta_data.FieldMetaData("keys", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IExecutorKeys.class, metaDataMap);
  }

  public IExecutorKeys() {
  }

  public IExecutorKeys(
    long msg_id,
    java.lang.String addr,
    java.util.List<java.lang.Long> keys)
  {
    this();
    this.msg_id = msg_id;
    setMsg_idIsSet(true);
    this.addr = addr;
    this.keys = keys;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IExecutorKeys(IExecutorKeys other) {
    __isset_bitfield = other.__isset_bitfield;
    this.msg_id = other.msg_id;
    if (other.isSetAddr()) {
      this.addr = other.addr;
    }
    if (other.isSetKeys()) {
      java.util.List<java.lang.Long> __this__keys = new java.util.ArrayList<java.lang.Long>(other.keys);
      this.keys = __this__keys;
    }
  }

  public IExecutorKeys deepCopy() {
    return new IExecutorKeys(this);
  }

  @Override
  public void clear() {
    setMsg_idIsSet(false);
    this.msg_id = 0;
    this.addr = null;
    this.keys = null;
  }

  public long getMsg_id() {
    return this.msg_id;
  }

  public IExecutorKeys setMsg_id(long msg_id) {
    this.msg_id = msg_id;
    setMsg_idIsSet(true);
    return this;
  }

  public void unsetMsg_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MSG_ID_ISSET_ID);
  }

  /** Returns true if field msg_id is set (has been assigned a value) and false otherwise */
  public boolean isSetMsg_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MSG_ID_ISSET_ID);
  }

  public void setMsg_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MSG_ID_ISSET_ID, value);
  }

  public java.lang.String getAddr() {
    return this.addr;
  }

  public IExecutorKeys setAddr(java.lang.String addr) {
    this.addr = addr;
    return this;
  }

  public void unsetAddr() {
    this.addr = null;
  }

  /** Returns true if field addr is set (has been assigned a value) and false otherwise */
  public boolean isSetAddr() {
    return this.addr != null;
  }

  public void setAddrIsSet(boolean value) {
    if (!value) {
      this.addr = null;
    }
  }

  public int getKeysSize() {
    return (this.keys == null) ? 0 : this.keys.size();
  }

  public java.util.Iterator<java.lang.Long> getKeysIterator() {
    return (this.keys == null) ? null : this.keys.iterator();
  }

  public void addToKeys(long elem) {
    if (this.keys == null) {
      this.keys = new java.util.ArrayList<java.lang.Long>();
    }
    this.keys.add(elem);
  }

  public java.util.List<java.lang.Long> getKeys() {
    return this.keys;
  }

  public IExecutorKeys setKeys(java.util.List<java.lang.Long> keys) {
    this.keys = keys;
    return this;
  }

  public void unsetKeys() {
    this.keys = null;
  }

  /** Returns true if field keys is set (has been assigned a value) and false otherwise */
  public boolean isSetKeys() {
    return this.keys != null;
  }

  public void setKeysIsSet(boolean value) {
    if (!value) {
      this.keys = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case MSG_ID:
      if (value == null) {
        unsetMsg_id();
      } else {
        setMsg_id((java.lang.Long)value);
      }
      break;

    case ADDR:
      if (value == null) {
        unsetAddr();
      } else {
        setAddr((java.lang.String)value);
      }
      break;

    case KEYS:
      if (value == null) {
        unsetKeys();
      } else {
        setKeys((java.util.List<java.lang.Long>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case MSG_ID:
      return getMsg_id();

    case ADDR:
      return getAddr();

    case KEYS:
      return getKeys();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case MSG_ID:
      return isSetMsg_id();
    case ADDR:
      return isSetAddr();
    case KEYS:
      return isSetKeys();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof IExecutorKeys)
      return this.equals((IExecutorKeys)that);
    return false;
  }

  public boolean equals(IExecutorKeys that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_msg_id = true;
    boolean that_present_msg_id = true;
    if (this_present_msg_id || that_present_msg_id) {
      if (!(this_present_msg_id && that_present_msg_id))
        return false;
      if (this.msg_id != that.msg_id)
        return false;
    }

    boolean this_present_addr = true && this.isSetAddr();
    boolean that_present_addr = true && that.isSetAddr();
    if (this_present_addr || that_present_addr) {
      if (!(this_present_addr && that_present_addr))
        return false;
      if (!this.addr.equals(that.addr))
        return false;
    }

    boolean this_present_keys = true && this.isSetKeys();
    boolean that_present_keys = true && that.isSetKeys();
    if (this_present_keys || that_present_keys) {
      if (!(this_present_keys && that_present_keys))
        return false;
      if (!this.keys.equals(that.keys))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(msg_id);

    hashCode = hashCode * 8191 + ((isSetAddr()) ? 131071 : 524287);
    if (isSetAddr())
      hashCode = hashCode * 8191 + addr.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeys()) ? 131071 : 524287);
    if (isSetKeys())
      hashCode = hashCode * 8191 + keys.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(IExecutorKeys other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetMsg_id()).compareTo(other.isSetMsg_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsg_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg_id, other.msg_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAddr()).compareTo(other.isSetAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addr, other.addr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeys()).compareTo(other.isSetKeys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys, other.keys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("IExecutorKeys(");
    boolean first = true;

    sb.append("msg_id:");
    sb.append(this.msg_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("addr:");
    if (this.addr == null) {
      sb.append("null");
    } else {
      sb.append(this.addr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keys:");
    if (this.keys == null) {
      sb.append("null");
    } else {
      sb.append(this.keys);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'msg_id' because it's a primitive and you chose the non-beans generator.
    if (addr == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'addr' was not present! Struct: " + toString());
    }
    if (keys == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'keys' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IExecutorKeysStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public IExecutorKeysStandardScheme getScheme() {
      return new IExecutorKeysStandardScheme();
    }
  }

  private static class IExecutorKeysStandardScheme extends org.apache.thrift.scheme.StandardScheme<IExecutorKeys> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IExecutorKeys struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MSG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.msg_id = iprot.readI64();
              struct.setMsg_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.addr = iprot.readString();
              struct.setAddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.keys = new java.util.ArrayList<java.lang.Long>(_list0.size);
                long _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI64();
                  struct.keys.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setKeysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMsg_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'msg_id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IExecutorKeys struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MSG_ID_FIELD_DESC);
      oprot.writeI64(struct.msg_id);
      oprot.writeFieldEnd();
      if (struct.addr != null) {
        oprot.writeFieldBegin(ADDR_FIELD_DESC);
        oprot.writeString(struct.addr);
        oprot.writeFieldEnd();
      }
      if (struct.keys != null) {
        oprot.writeFieldBegin(KEYS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.keys.size()));
          for (long _iter3 : struct.keys)
          {
            oprot.writeI64(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IExecutorKeysTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public IExecutorKeysTupleScheme getScheme() {
      return new IExecutorKeysTupleScheme();
    }
  }

  private static class IExecutorKeysTupleScheme extends org.apache.thrift.scheme.TupleScheme<IExecutorKeys> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IExecutorKeys struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.msg_id);
      oprot.writeString(struct.addr);
      {
        oprot.writeI32(struct.keys.size());
        for (long _iter4 : struct.keys)
        {
          oprot.writeI64(_iter4);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IExecutorKeys struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.msg_id = iprot.readI64();
      struct.setMsg_idIsSet(true);
      struct.addr = iprot.readString();
      struct.setAddrIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.keys = new java.util.ArrayList<java.lang.Long>(_list5.size);
        long _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = iprot.readI64();
          struct.keys.add(_elem6);
        }
      }
      struct.setKeysIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

