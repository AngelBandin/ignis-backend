/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.ignis.rpc.driver;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class IDataId implements org.apache.thrift.TBase<IDataId, IDataId._Fields>, java.io.Serializable, Cloneable, Comparable<IDataId> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IDataId");

  private static final org.apache.thrift.protocol.TField CONTAINER_FIELD_DESC = new org.apache.thrift.protocol.TField("container", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("job", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new IDataIdStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new IDataIdTupleSchemeFactory();

  private long container; // required
  private long job; // required
  private long data; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONTAINER((short)1, "container"),
    JOB((short)2, "job"),
    DATA((short)3, "data");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONTAINER
          return CONTAINER;
        case 2: // JOB
          return JOB;
        case 3: // DATA
          return DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONTAINER_ISSET_ID = 0;
  private static final int __JOB_ISSET_ID = 1;
  private static final int __DATA_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONTAINER, new org.apache.thrift.meta_data.FieldMetaData("container", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JOB, new org.apache.thrift.meta_data.FieldMetaData("job", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IDataId.class, metaDataMap);
  }

  public IDataId() {
  }

  public IDataId(
    long container,
    long job,
    long data)
  {
    this();
    this.container = container;
    setContainerIsSet(true);
    this.job = job;
    setJobIsSet(true);
    this.data = data;
    setDataIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IDataId(IDataId other) {
    __isset_bitfield = other.__isset_bitfield;
    this.container = other.container;
    this.job = other.job;
    this.data = other.data;
  }

  public IDataId deepCopy() {
    return new IDataId(this);
  }

  @Override
  public void clear() {
    setContainerIsSet(false);
    this.container = 0;
    setJobIsSet(false);
    this.job = 0;
    setDataIsSet(false);
    this.data = 0;
  }

  public long getContainer() {
    return this.container;
  }

  public IDataId setContainer(long container) {
    this.container = container;
    setContainerIsSet(true);
    return this;
  }

  public void unsetContainer() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONTAINER_ISSET_ID);
  }

  /** Returns true if field container is set (has been assigned a value) and false otherwise */
  public boolean isSetContainer() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONTAINER_ISSET_ID);
  }

  public void setContainerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONTAINER_ISSET_ID, value);
  }

  public long getJob() {
    return this.job;
  }

  public IDataId setJob(long job) {
    this.job = job;
    setJobIsSet(true);
    return this;
  }

  public void unsetJob() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JOB_ISSET_ID);
  }

  /** Returns true if field job is set (has been assigned a value) and false otherwise */
  public boolean isSetJob() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JOB_ISSET_ID);
  }

  public void setJobIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JOB_ISSET_ID, value);
  }

  public long getData() {
    return this.data;
  }

  public IDataId setData(long data) {
    this.data = data;
    setDataIsSet(true);
    return this;
  }

  public void unsetData() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DATA_ISSET_ID);
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DATA_ISSET_ID);
  }

  public void setDataIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DATA_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case CONTAINER:
      if (value == null) {
        unsetContainer();
      } else {
        setContainer((java.lang.Long)value);
      }
      break;

    case JOB:
      if (value == null) {
        unsetJob();
      } else {
        setJob((java.lang.Long)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CONTAINER:
      return getContainer();

    case JOB:
      return getJob();

    case DATA:
      return getData();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CONTAINER:
      return isSetContainer();
    case JOB:
      return isSetJob();
    case DATA:
      return isSetData();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof IDataId)
      return this.equals((IDataId)that);
    return false;
  }

  public boolean equals(IDataId that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_container = true;
    boolean that_present_container = true;
    if (this_present_container || that_present_container) {
      if (!(this_present_container && that_present_container))
        return false;
      if (this.container != that.container)
        return false;
    }

    boolean this_present_job = true;
    boolean that_present_job = true;
    if (this_present_job || that_present_job) {
      if (!(this_present_job && that_present_job))
        return false;
      if (this.job != that.job)
        return false;
    }

    boolean this_present_data = true;
    boolean that_present_data = true;
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (this.data != that.data)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(container);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(job);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(data);

    return hashCode;
  }

  @Override
  public int compareTo(IDataId other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetContainer()).compareTo(other.isSetContainer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContainer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.container, other.container);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJob()).compareTo(other.isSetJob());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJob()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.job, other.job);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("IDataId(");
    boolean first = true;

    sb.append("container:");
    sb.append(this.container);
    first = false;
    if (!first) sb.append(", ");
    sb.append("job:");
    sb.append(this.job);
    first = false;
    if (!first) sb.append(", ");
    sb.append("data:");
    sb.append(this.data);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'container' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'job' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'data' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IDataIdStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public IDataIdStandardScheme getScheme() {
      return new IDataIdStandardScheme();
    }
  }

  private static class IDataIdStandardScheme extends org.apache.thrift.scheme.StandardScheme<IDataId> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IDataId struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONTAINER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.container = iprot.readI64();
              struct.setContainerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JOB
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.job = iprot.readI64();
              struct.setJobIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.data = iprot.readI64();
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetContainer()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'container' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetJob()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'job' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetData()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'data' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IDataId struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CONTAINER_FIELD_DESC);
      oprot.writeI64(struct.container);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JOB_FIELD_DESC);
      oprot.writeI64(struct.job);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATA_FIELD_DESC);
      oprot.writeI64(struct.data);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IDataIdTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public IDataIdTupleScheme getScheme() {
      return new IDataIdTupleScheme();
    }
  }

  private static class IDataIdTupleScheme extends org.apache.thrift.scheme.TupleScheme<IDataId> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IDataId struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.container);
      oprot.writeI64(struct.job);
      oprot.writeI64(struct.data);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IDataId struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.container = iprot.readI64();
      struct.setContainerIsSet(true);
      struct.job = iprot.readI64();
      struct.setJobIsSet(true);
      struct.data = iprot.readI64();
      struct.setDataIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

